#!/usr/bin/env python
# -*- mode: py -*-

import argparse
import base64
import os
import json
import shutil
import sys
import subprocess

from typing import List


def make_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-shared", default=False, action='store_true'
    )
    parser.add_argument(
        "-l", action="append", dest="link_libs"
    )
    parser.add_argument(
        "-S", action="append", dest="link_static"
    )
    parser.add_argument(
        "-L", action="append", dest="link_paths"
    )
    parser.add_argument(
        "-o", dest="output_file", type=str
    )
    parser.add_argument(
       "input_file", type=str
    )

    return parser


def test_parser():
    parser = make_parser()

    a0, _ = parser.parse_known_args(["test.mojo"])
    assert a0.shared is False
    assert a0.input_file == "test.mojo"
    assert a0.link_libs == None
    assert a0.link_paths == None

    a1, _ = parser.parse_known_args("-shared -lCallable -lfoo test.mojo -o test".split())
    assert a1.link_libs == ["Callable", "foo"]
    assert a1.link_paths == None
    assert a1.input_file == "test.mojo"
    print(a1.output_file)
    assert a1.output_file == "test"


#test_parser()


def prepare_ld_args(args, mojo_args):
    link_args = [f"-l{arg}" for arg in args.link_libs] if args.link_libs else []
    lib_args = [f"-L{arg}" for arg in args.link_paths] if args.link_paths else []

    if args.link_static:
        lib_args += args.link_static

    return {
        "shared": args.shared,
        "link_args": link_args,
        "lib_args": lib_args,
        "output_file": args.output_file
    } 


def get_subprocess_env(args, mojo_args):
    env = os.environ.copy()

    # We need mojo to use the `ld` in the hooks dir next to this file
    mojoc_dir = os.path.dirname(os.path.realpath(__file__))
    ld_path =  mojoc_dir + "/hooks"
    env["PATH"] = ld_path + ":" + env["PATH"]

    # We need to pass the user's arguments onto  our `ld` hook
    ld_args = prepare_ld_args(args, mojo_args)
    env["MOJOC_LD_FWD"] = json.dumps(ld_args)

    return env


def run_mojo(args, mojo_args):
    exec_args = (
        "mojo", "build", *mojo_args
    )
    exec_kwargs = {
        "env": get_subprocess_env(args, mojo_args),
    }

    return subprocess.run(exec_args, **exec_kwargs, check=False)


def cli(input_args):
    parser = make_parser()
    args, mojo_args = parser.parse_known_args(input_args)
    
    # parse_known_args returns a tuple of known & unknown args
    # we pass the unknown and shared args onto `mojo build`
    run_mojo(args, mojo_args)


if __name__ == '__main__':
    cli(sys.argv)